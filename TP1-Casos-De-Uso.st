TestCase subclass: #CriterioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!CriterioTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 13:54'!test01CriterioNoValido 		"Arrange"			"Act"		"Assert"	self should: [AlgoRastreadorZ conCriterioMas: 'Grande'] raise: CriterioNoValidoError.! !TestCase subclass: #PeleadorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!PeleadorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 14:16'!test01PeleadorDevuelveNombre	| peleador nombreEsperado nombreObtenido|		"Arrange"		nombreEsperado := 'Gohan'.	peleador := Peleador conNombre: 'Gohan' kiBase: 12345 transformacion: 'Base' yModelo: 'Viejo'.		"Act"		nombreObtenido := peleador nombre.		"Assert"	self assert: nombreEsperado equals: nombreObtenido.! !!PeleadorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:46'!test02PeleadorConKiNoValido	"Arrange"			"Act"			"Assert"	self should: [ Peleador conNombre: 'Gohan' kiBase: -12345 transformacion: 'Base' yModelo: 'Nuevo' ] raise: KiNoValidoError.! !TestCase subclass: #RastreadorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!RastreadorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 16:18'!test02RegistroDeRastreadorNoEncuentraPeleador	| algoRastreadorZ  |		"Arrange"			algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' DelPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Mono Gigante'. 	algoRastreadorZ registrarRastreoConModelo: 'Viejo' DelPeleadorConNombre: 'Gohan' KiBase: 7000 yTransformacion: 'Kaio-Ken'. 	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' DelPeleadorConNombre: 'Krillin' KiBase: 2000 yTransformacion: 'Base'. 		"Act"			"Assert"	self should: [algoRastreadorZ nivelDePeleaDe: 'Vegeta' ] raise: PeleadorNoEncontradoError .! !!RastreadorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 16:58'!test03PeleadorRegistradoPorDuplicadoDevuelveKiDelPrimerRegistro	| algoRastreadorZ kiEsperado kiObtenido |		"Arrange"			kiEsperado := 1000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' DelPeleadorConNombre: 'Goku' KiBase: 1000 yTransformacion: 'Base'. 	algoRastreadorZ registrarRastreoConModelo: 'Viejo' DelPeleadorConNombre: 'Goku' KiBase: 2000 yTransformacion: 'Base'. 		"Act"		kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!RastreadorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 16:15'!test01RegistroDeRastreadorVacio	| algoRastreadorZ  |		"Arrange"		algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"Act"			"Assert"	self should: [algoRastreadorZ obtenerPeleadorSegunCriterio] raise: RegistroVacioError .! !TestCase subclass: #TransformacionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!TransformacionTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:39'!test03TransformacionKaioKenDevuelveElKiDuplicadoDeUnPeleador	| peleador kiEsperado kiObtenido |		"Arrange"		kiEsperado := 2468.	peleador := Peleador conNombre: 'Gohan' kiBase: 1234 transformacion: 'Kaio-Ken' yModelo: 'Viejo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!TransformacionTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:55'!test01TransformacionNoValida	"Arrange"			"Act"			"Assert"	self should: [ Peleador conNombre: 'Gohan' kiBase: 5000 transformacion: 'Evolucionada' yModelo: 'Nuevo' ] raise: TransformacionNoValidaError .! !!TransformacionTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:42'!test04TransformacionMonoGiganteDevuelveElKiModificadoDeUnPeleador	| peleador kiEsperado kiObtenido |		"Arrange"		kiEsperado := (1234 * 10) asLargerPowerOfTwo.	peleador := Peleador conNombre: 'Gohan' kiBase: 1234 transformacion: 'Mono Gigante' yModelo: 'Nuevo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!TransformacionTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:38'!test02TransformacionBaseDevuelveElKiDeUnPeleador	| peleador kiEsperado kiObtenido |		"Arrange"		kiEsperado := 1234.	peleador := Peleador conNombre: 'Gohan' kiBase: 1234 transformacion: 'Base' yModelo: 'Viejo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !TestCase subclass: #VisorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!VisorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:53'!test02PeleadorConKiMayorA9000SeRegistraConVisorViejo			| kiEsperado kiObtenido peleador |		"Arrange"		kiEsperado := 9000.		peleador := Peleador conNombre: 'Goku' kiBase: 5000  transformacion: 'Mono Gigante' yModelo: 'Viejo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!VisorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:54'!test03PeleadorConKiMenorA9000SeRegistraConVisorNuevo		| kiEsperado kiObtenido peleador |		"Arrange"		kiEsperado := 5000.		peleador := Peleador conNombre: 'Goku' kiBase: 5000  transformacion: 'Base' yModelo: 'Viejo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!VisorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:53'!test01PeleadorConKiMenorA9000SeRegistraConVisorViejo			| kiEsperado kiObtenido peleador |		"Arrange"		kiEsperado := 5000.		peleador := Peleador conNombre: 'Goku' kiBase: 5000  transformacion: 'Base' yModelo: 'Viejo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!VisorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:54'!test04PeleadorConKiMayorA9000SeRegistraConVisorNuevo		| kiEsperado kiObtenido peleador |		"Arrange"		kiEsperado := (5000 * 10) asLargerPowerOfTwo.		peleador := Peleador conNombre: 'Goku' kiBase: 5000  transformacion: 'Mono Gigante' yModelo: 'Nuevo'.		"Act"		kiObtenido := peleador ki.		"Assert"	self assert: kiEsperado equals: kiObtenido.! !!VisorTest methodsFor: 'tests' stamp: 'MartinAlderete 5/9/2024 15:57'!test05ModeloDeVisorNoValido	"Arrange"			"Act"			"Assert"	self should: [ Peleador conNombre: 'Gohan' kiBase: 5000 transformacion: 'Kaio-Ken' yModelo: 'Moderno' ] raise: ModeloNoValidoError .! !